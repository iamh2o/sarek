/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/sarek Daylily Ephemeral Cluster config
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Profile for running nf-core/sarek on the AWS ParallelCluster environment
    provisioned by Daylily Informatics. The cluster exposes an FSx for Lustre
    mount at /fsx with reference data mirrored from the daylily-omics-references
    bucket. This config wires the pipeline to that layout and applies sensible
    defaults for the Slurm scheduler shipped with the cluster.
----------------------------------------------------------------------------------------
*/

def dayUser           = System.getenv('USER') ?: 'ubuntu'
def dataRoot          = '/fsx/data'
def hg38ReferenceRoot = "${dataRoot}/genomic_data/organism_references/H_sapiens/hg38"
def hg38AnnotationRoot = "${dataRoot}/genomic_data/organism_annotations/H_sapiens/hg38"
def containerCache    = "/fsx/resources/environments/containers/${dayUser}"
def workRoot          = "/fsx/work/${dayUser}/sarek"
def resultsRoot       = "/fsx/analysis_results/${dayUser}/sarek"

def slurmQueueFromEnv = System.getenv('DAYLILY_SLURM_QUEUE') ?: System.getenv('SLURM_QUEUE')
def projectTag        = System.getenv('DAY_PROJECT')

def clusterOptions = []
if (projectTag) clusterOptions << "--comment=${projectTag}"

def clusterOptionsString = clusterOptions ? clusterOptions.join(' ') : null

def hg38FastaBase = "${hg38ReferenceRoot}/fasta_fai_minalt/GRCh38_no_alt_analysis_set"

def queueSize = (System.getenv('DAYLILY_QUEUE_SIZE') ?: System.getenv('NXF_QUEUE_SIZE') ?: '256') as int

def executorCpus = System.getenv('DAYLILY_HEADNODE_MAX_CPUS') ?: System.getenv('NXF_EXECUTOR_CPUS')

def scratchDir = System.getenv('DAY_SCRATCH') ?: '/fsx/scratch'

def awsRegion = System.getenv('AWS_REGION') ?: System.getenv('AWS_DEFAULT_REGION')

params {
    config_profile_name        = 'daylily-ephemeral-cluster'
    config_profile_description = 'Configuration optimised for the Daylily Informatics AWS ParallelCluster with FSx reference mount.'
    config_profile_contact     = 'Daylily Informatics'
    config_profile_url         = 'https://github.com/Daylily-Informatics/daylily-ephemeral-cluster'

    outdir    = params.outdir ?: resultsRoot
    vep_cache = params.vep_cache ?: "${dataRoot}/tool_specific_resources/vep"

    genomes {
        'DAYLILY.GRCh38' {
            bwa                   = "${hg38ReferenceRoot}/fasta_fai_minalt"
            bwamem2               = "${hg38ReferenceRoot}/fasta_fai_minalt"
            chr_dir               = "${hg38ReferenceRoot}/broad_hg38"
            dict                  = "${hg38FastaBase}.dict"
            fasta                 = "${hg38FastaBase}.fasta"
            fasta_fai             = "${hg38FastaBase}.fasta.fai"
            germline_resource     = "${hg38AnnotationRoot}/gatk/af-only-gnomad.hg38.vcf.gz"
            germline_resource_tbi = "${hg38AnnotationRoot}/gatk/af-only-gnomad.hg38.vcf.gz.tbi"
            known_indels          = "${hg38AnnotationRoot}/gatk/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
            known_indels_tbi      = "${hg38AnnotationRoot}/gatk/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz.tbi"
            known_indels_vqsr     = '--resource:mills,known=false,training=true,truth=true,prior=10.0 Mills_and_1000G_gold_standard.indels.hg38.vcf.gz'
            known_snps            = "${hg38AnnotationRoot}/gatk/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
            known_snps_tbi        = "${hg38AnnotationRoot}/gatk/1000G_phase1.snps.high_confidence.hg38.vcf.gz.tbi"
            known_snps_vqsr       = '--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_phase1.snps.high_confidence.hg38.vcf.gz'
            dbsnp                 = "${hg38AnnotationRoot}/gatk/Homo_sapiens_assembly38.dbsnp138.vcf.gz"
            dbsnp_tbi             = "${hg38AnnotationRoot}/gatk/Homo_sapiens_assembly38.dbsnp138.vcf.gz.tbi"
            dbsnp_vqsr            = '--resource:dbsnp,known=false,training=true,truth=false,prior=2.0 Homo_sapiens_assembly38.dbsnp138.vcf.gz'
            intervals             = "${hg38ReferenceRoot}/broad_hg38/hg38_broad_core.bed"
            snpeff_db             = 'GRCh38.99'
            vep_cache_version     = '114'
            vep_genome            = 'GRCh38'
            vep_species           = 'homo_sapiens'
        }
    }
}

process {
    executor = { name = 'slurm' }
    scratch = scratchDir
    queue = { slurmQueueFromEnv ?: (task.ext.queue ?: null) }
    clusterOptions = clusterOptionsString
}

workDir = System.getenv('NXF_WORK') ?: "${workRoot}/work"

singularity {
    enabled    = true
    autoMounts = true
    cacheDir   = containerCache
}

apptainer {
    enabled    = false
    cacheDir   = containerCache
}

aws {
    if (awsRegion) {
        region = awsRegion
    }
}
